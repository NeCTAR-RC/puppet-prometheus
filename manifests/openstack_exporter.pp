# @summary This module manages prometheus openstack_exporter (https://github.com/openstack-exporter/openstack-exporter)
# @param arch
#  Architecture (amd64 or i386)
# @param bin_dir
#  Directory where binaries are located
# @param config_file
#   Path to OpenStack exporter configuration file
# @param config_mode
#  The permissions of the configuration files
# @param download_extension
#  Extension for the release binary archive
# @param download_url
#  Complete URL corresponding to the where the release binary archive can be downloaded
# @param download_url_base
#  Base URL for the binary archive
# @param extra_groups
#  Extra groups to add the binary user to
# @param extra_options
#  Extra options added to the startup command
# @param group
#  Group under which the binary is running
# @param init_style
#  Service startup scripts style (e.g. rc, upstart or systemd)
# @param install_method
#  Installation method: url or package (only url is supported currently)
# @param manage_group
#  Whether to create a group for or rely on external code for that
# @param manage_service
#  Should puppet manage the service? (default true)
# @param manage_user
#  Whether to create user or rely on external code for that
# @param os
#  Operating system (linux is the only one supported)
# @param package_ensure
#  If package, then use this for package ensure default 'latest'
# @param package_name
#  The binary package name - not available yet
# @param purge_config_dir
#  Purge config files no longer generated by Puppet
# @param restart_on_change
#  Should puppet restart the service on configuration change? (default true)
# @param service_enable
#  Whether to enable the service from puppet (default true)
# @param service_ensure
#  State ensured for the service (default 'running')
# @param service_name
#  Name of the openstack exporter service (default 'openstack_exporter')
# @param user
#  User which runs the service
# @param version
#  The binary release version
# @param proxy_server
#  Optional proxy server, with port number if needed. ie: https://example.com:8080
# @param proxy_type
#  Optional proxy server type (none|http|https|ftp)
# @param region_name
#   OpenStack region name
# @param username
#   OpenStack username for authentication
# @param password
#   OpenStack password for authentication
# @param project_name
#   OpenStack project name
# @param project_domain_name
#   OpenStack project domain name
# @param user_domain_name
#   OpenStack user domain name
# @param auth_url
#   OpenStack authentication URL
class prometheus::openstack_exporter (
  Stdlib::Absolutepath $config_file                          = '/etc/openstack/cloud.yaml',
  String[1] $package_name                                    = 'openstack-exporter',
  String $download_extension                                 = 'tar.gz',
  String[1] $version                                         = '1.7.0',
  String[1] $package_ensure                                  = 'latest',
  String[1] $user                                            = 'openstack-exporter',
  String[1] $group                                           = 'openstack-exporter',
  Prometheus::Uri $download_url_base                         = 'https://github.com/openstack-exporter/openstack-exporter/releases',
  Array[String] $extra_groups                                = [],
  Prometheus::Initstyle $init_style                          = $prometheus::init_style,
  Boolean $purge_config_dir                                  = true,
  Boolean $restart_on_change                                 = true,
  Boolean $service_enable                                    = true,
  Stdlib::Ensure::Service $service_ensure                    = 'running',
  String[1] $service_name                                    = 'openstack-exporter',
  Prometheus::Install $install_method                        = $prometheus::install_method,
  Boolean $manage_group                                      = true,
  Boolean $manage_service                                    = true,
  Boolean $manage_user                                       = true,
  String[1] $os                                              = downcase($facts['kernel']),
  Optional[String[1]] $extra_options                         = undef,
  Optional[Prometheus::Uri] $download_url                    = undef,
  String[1] $config_mode                                     = $prometheus::config_mode,
  String[1] $arch                                            = $prometheus::real_arch,
  Stdlib::Absolutepath $bin_dir                              = $prometheus::bin_dir,
  Optional[Stdlib::Host] $scrape_host                        = undef,
  Boolean $export_scrape_job                                 = false,
  Stdlib::Port $scrape_port                                  = 9180,
  String[1] $scrape_job_name                                 = 'openstack',
  Optional[Hash] $scrape_job_labels                          = undef,
  Optional[String[1]] $bin_name                              = undef,
  Optional[String[1]] $proxy_server                          = undef,
  Optional[Enum['none', 'http', 'https', 'ftp']] $proxy_type = undef,
  # OpenStack specific parameters
  String[1] $region_name                                     = 'RegionOne',
  String[1] $username                                        = 'admin',
  String[1] $password                                        = 'password',
  String[1] $project_name                                    = 'admin',
  String[1] $project_domain_name                             = 'Default',
  String[1] $user_domain_name                                = 'Default',
  String[1] $auth_url                                        = 'http://localhost:5000/v3',
) inherits prometheus {
  $real_download_url = pick($download_url,"${download_url_base}/download/v${version}/${package_name}_${version}_${os}_${arch}.${download_extension}")

  $notify_service = $restart_on_change ? {
    true    => Service[$service_name],
    default => undef,
  }

  # Ensure the configuration directory exists
  $config_dir = dirname($config_file)
  file { $config_dir:
    ensure => 'directory',
    owner  => 'root',
    group  => 'root',
    mode   => '0755',
  }

  file { $config_file:
    ensure  => file,
    owner   => $user,
    group   => $group,
    mode    => $config_mode,
    content => epp('prometheus/openstack_clouds.yaml.epp', {
      'region_name'         => $region_name,
      'username'           => $username,
      'password'           => $password,
      'project_name'       => $project_name,
      'project_domain_name' => $project_domain_name,
      'user_domain_name'    => $user_domain_name,
      'auth_url'           => $auth_url,
    }),
    notify  => $notify_service,
    require => File[$config_dir],
  }

  $options = join([
      "--os-client-config=${config_file}",
      $extra_options,
      "default",
  ], ' ')

  $extract_path = "/opt/${service_name}-${version}.${os}-${arch}"
  file { $extract_path:
    ensure => 'directory',
    owner  => 'root',
    group  => 'root',
    mode   => '0755',
    before => Prometheus::Daemon[$service_name],
  }

  prometheus::daemon { $service_name:
    install_method     => $install_method,
    version           => $version,
    download_extension => $download_extension,
    os                => $os,
    arch              => $arch,
    real_download_url => $real_download_url,
    extract_path      => $extract_path,
    bin_dir           => $bin_dir,
    notify_service    => $notify_service,
    package_name      => $package_name,
    package_ensure    => $package_ensure,
    manage_user       => $manage_user,
    user              => $user,
    extra_groups      => $extra_groups,
    group             => $group,
    manage_group      => $manage_group,
    purge             => $purge_config_dir,
    options           => $options,
    init_style        => $init_style,
    service_ensure    => $service_ensure,
    service_enable    => $service_enable,
    manage_service    => $manage_service,
    export_scrape_job => $export_scrape_job,
    scrape_host       => $scrape_host,
    scrape_port       => $scrape_port,
    scrape_job_name   => $scrape_job_name,
    scrape_job_labels => $scrape_job_labels,
    bin_name          => $bin_name,
    proxy_server      => $proxy_server,
    proxy_type        => $proxy_type,
  }
}
