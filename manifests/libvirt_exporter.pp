# @summary This module manages prometheus libvirt_exporter
#
# @param arch Architecture
# @param bin_dir Directory where binaries are located
# @param extra_groups Extra groups to add the binary user to
# @param extra_options Extra options added to the startup command
# @param group Group under which the binary is running
# @param init_style Service startup scripts style (e.g. rc, upstart or systemd)
# @param install_method Installation method: url or package
# @param manage_group Whether to create a group for or rely on external code for that
# @param manage_service Should puppet manage the service?
# @param manage_user Whether to create user or rely on external code for that
# @param os Operating system (linux is the only one supported)
# @param package_ensure If package, then use this for package ensure default 'latest'
# @param package_name The binary package name
# @param purge_config_dir Purge config files no longer generated by Puppet
# @param restart_on_change Should puppet restart the service on configuration change?
# @param service_enable Whether to enable the service from puppet
# @param service_ensure State ensured for the service
# @param service_name Name of the libvirt exporter service
# @param user User which runs the service
# @param version The binary release version
# @param download_url Complete URL corresponding to the where the release can be downloaded. (This option is only relevant when `install_method` is `url`.)
# @param download_url_base Base URL for the binary archive. (This option is only relevant when `install_method` is `url`.)

class prometheus::libvirt_exporter (
  String[1] $download_extension           = 'tar.gz',
  Array[String] $extra_groups             = ['libvirt'],
  String[1] $group                        = 'prometheus',
  String[1] $package_ensure               = 'latest',
  String[1] $package_name                 = 'prometheus-libvirt-exporter',
  String[1] $user                         = 'prometheus',
  String[1] $version                      = '1.6.0',
  Stdlib::HTTPUrl $download_url_base      = 'https://github.com/inovex/prometheus-libvirt-exporter/releases',
  Optional[Stdlib::HTTPUrl] $download_url = undef,
  Boolean $purge_config_dir               = true,
  Boolean $restart_on_change              = true,
  Boolean $service_enable                 = true,
  Stdlib::Ensure::Service $service_ensure = 'running',
  String[1] $service_name                 = 'prometheus-libvirt-exporter',
  Prometheus::Initstyle $init_style       = 'systemd',
  Prometheus::Install $install_method     = 'url',
  Boolean $manage_group                   = false,
  Boolean $manage_service                 = true,
  Boolean $manage_user                    = false,
  String[1] $os                           = downcase($facts['kernel']),
  Optional[String[1]] $extra_options      = undef,
  String[1] $arch                         = $prometheus::real_arch,
  Stdlib::Absolutepath $bin_dir           = $prometheus::bin_dir,
  Optional[Stdlib::Host] $scrape_host     = undef,
  Boolean $export_scrape_job              = false,
  Stdlib::Port $scrape_port               = 9177,
  String[1] $scrape_job_name              = 'libvirt',
  Optional[Hash] $scrape_job_labels       = undef,
) inherits prometheus {
  $notify_service = $restart_on_change ? {
    true    => Service[$service_name],
    default => undef,
  }

  $options = $extra_options ? {
    undef   => '',
    default => $extra_options,
  }

  $real_download_url = pick($download_url,"${download_url_base}/download/v${version}/${package_name}-${version}.${os}-${arch}.${download_extension}")

  prometheus::daemon { $service_name:
    install_method     => $install_method,
    version            => $version,
    download_extension => $download_extension,
    os                 => $os,
    arch               => $arch,
    real_download_url  => $real_download_url,
    bin_dir            => $bin_dir,
    notify_service     => $notify_service,
    package_name       => $package_name,
    package_ensure     => $package_ensure,
    manage_user        => $manage_user,
    user               => $user,
    extra_groups       => $extra_groups,
    group              => $group,
    manage_group       => $manage_group,
    purge              => $purge_config_dir,
    options            => $options,
    init_style         => $init_style,
    service_ensure     => $service_ensure,
    service_enable     => $service_enable,
    manage_service     => $manage_service,
    export_scrape_job  => $export_scrape_job,
    scrape_host        => $scrape_host,
    scrape_port        => $scrape_port,
    scrape_job_name    => $scrape_job_name,
    scrape_job_labels  => $scrape_job_labels,
  }
}
